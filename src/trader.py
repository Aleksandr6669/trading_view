from binance.client import Client
from binance.enums import *
from binance.exceptions import BinanceAPIException, BinanceOrderException
import pandas_ta as ta
from decimal import Decimal, ROUND_DOWN
from math import floor

class BinanceTrader:
    def __init__(self, api_key=None, api_secret=None, is_testnet=True):
        self.api_key = api_key
        self.api_secret = api_secret
        self.is_testnet = is_testnet
        self.client = None
        self.last_signal = None  # ‚è≥ –ü–æ—Å–ª–µ–¥–Ω–∏–π —Å–∏–≥–Ω–∞–ª
        self.last_entry_price = None  # üíµ –¶–µ–Ω–∞ –≤—Ö–æ–¥–∞
        self.symbol_precisions = {}
        self.orders_enabled = False
        self.default_leverage = None  # üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–µ –ø–ª–µ—á–æ
        if api_key and api_secret:
            self.init_client()

    def set_credentials(self, api_key, api_secret, is_testnet=False):
        self.api_key = api_key
        self.api_secret = api_secret
        self.is_testnet = is_testnet
        self.init_client()

    def init_client(self):
        self.client = Client(self.api_key, self.api_secret, testnet=self.is_testnet)
        self.fetch_precisions()

    def set_orders_enabled(self, enabled: bool):
        self.orders_enabled = enabled


    def fetch_precisions(self):
        info = self.client.futures_exchange_info()
        for symbol_info in info["symbols"]:
            symbol = symbol_info["symbol"]
            price_step = float(next(f["tickSize"] for f in symbol_info["filters"] if f["filterType"] == "PRICE_FILTER"))
            qty_step = float(next(f["stepSize"] for f in symbol_info["filters"] if f["filterType"] == "LOT_SIZE"))
            self.symbol_precisions[symbol] = {
                "price_step": price_step,
                "qty_step": qty_step
            }

    def round_to_step(self, value, step):
        step_dec = Decimal(str(step))
        value_dec = Decimal(str(value))
        return float(value_dec.quantize(step_dec, rounding=ROUND_DOWN))

    def round_price(self, symbol, value):
        if symbol not in self.symbol_precisions:
            raise ValueError(f"‚ùå –¢–∏–∫–µ—Ä {symbol} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ symbol_precisions")
        step = self.symbol_precisions[symbol]["price_step"]
        return self.round_to_step(value, step)

    def round_qty(self, symbol, value):
        if symbol not in self.symbol_precisions:
            raise ValueError(f"‚ùå –¢–∏–∫–µ—Ä {symbol} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ symbol_precisions")
        step = self.symbol_precisions[symbol]["qty_step"]
        return self.round_to_step(value, step)

    def check_futures_balance(self):
        try:
            account_info = self.client.futures_account()
            for asset in account_info["assets"]:
                if asset["asset"] == "USDT":
                    balance = asset['walletBalance']
                    return float(balance)
            msg = "‚ö†Ô∏è USDT –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ñ—å—é—á–µ—Ä—Å–Ω–æ–º –∞–∫–∫–∞—É–Ω—Ç–µ."
            print(msg)
            return 0
        except Exception as e:
            msg = f"[‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞]: {str(e)}"
            print(msg)
            return 0

    def set_leverage(self, symbol, leverage):
        try:
            result = self.client.futures_change_leverage(symbol=symbol, leverage=leverage)
            msg = f"üìê –ü–ª–µ—á–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {result['leverage']}x –¥–ª—è {symbol}"
            print(msg)
            return msg
        except Exception as e:
            msg = f"[‚ö†Ô∏è –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–ª–µ—á–∞]: {str(e)}"
            print(msg)
            return msg

    def has_open_position(self, symbol):
        try:
            positions = self.client.futures_position_information(symbol=symbol)
            for pos in positions:
                if pos['positionSide'] == 'BOTH':
                    amt = float(pos['positionAmt'])
                    if amt != 0:
                        return True
            self.last_signal = None
            self.last_entry_price = None
            return False
        except Exception as e:
            print(f"[‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–∑–∏—Ü–∏–∏]: {str(e)}")
            return False

    def get_open_position(self, symbol):
        try:
            positions = self.client.futures_position_information(symbol=symbol)
            open_orders = self.client.futures_get_open_orders(symbol=symbol)

            sl_order = None
            tp_order = None

            for order in open_orders:
                if order.get("reduceOnly") and order["type"] in ["STOP", "STOP_MARKET"]:
                    sl_order = order
                elif order.get("reduceOnly") and order["type"] in ["TAKE_PROFIT", "TAKE_PROFIT_MARKET"]:
                    tp_order = order

            for pos in positions:
                if pos['positionSide'] == 'BOTH':
                    amt = float(pos.get('positionAmt', 0))
                    if amt != 0:
                        entry_price = float(pos.get('entryPrice', 0))
                        leverage = float(pos.get('leverage', 0))
                        if leverage == 0.0:
                            leverage = self.default_leverage

                        unrealized_pnl = float(pos.get('unRealizedProfit', 0))
                        margin = float(pos.get('positionMargin', 0))
                        mark_price = float(pos.get('markPrice', 0))

                        # üõ° –ó–∞—â–∏—Ç–∞: –µ—Å–ª–∏ –æ—Ä–¥–µ—Ä–∞ –Ω–µ—Ç, –Ω–µ —É–ø–∞–¥—ë–º
                        sl_price = float(sl_order.get("stopPrice", 0)) if sl_order else None
                        tp_price = float(tp_order.get("stopPrice", 0)) if tp_order else None

                        return {
                            "amount": amt,
                            "entry_price": entry_price,
                            "leverage": leverage,
                            "pnl": unrealized_pnl,
                            "margin": margin,
                            "mark_price": mark_price,
                            "sl": sl_price,
                            "tp": tp_price
                        }
            return None
        except Exception as e:
            return None


    def open_position(self, symbol, side, quantity, sl_pct, tp_pct, leverage):
        if not self.orders_enabled:
            print("üõë –û—Ä–¥–µ—Ä–∞ –æ—Ç–∫–ª—é—á–µ–Ω—ã ‚Äî –æ—Ç–∫—Ä—ã—Ç–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
            return "üõë –û—Ä–¥–µ—Ä–∞ –æ—Ç–∫–ª—é—á–µ–Ω—ã ‚Äî –æ—Ç–∫—Ä—ã—Ç–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ."
        self.cleanup_after_trailing_stop(symbol)
        try:
            if self.last_signal == side:
                msg = f"‚è≥ –°–∏–≥–Ω–∞–ª {side} —É–∂–µ –±—ã–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω. –ñ–¥—ë–º –Ω–æ–≤–æ–≥–æ."
                print(msg)
                return msg

            self.last_signal = side
            self.set_leverage(symbol, leverage)

            ticker = self.client.futures_symbol_ticker(symbol=symbol)
            current_price = float(ticker["price"])
            print(f"üìç –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: {current_price}")

            # –†–∞—Å—á—ë—Ç SL –∏ TP –¥–æ –æ–∫—Ä—É–≥–ª–µ–Ω–∏—è
            sl_raw = current_price * (1 - sl_pct) if side == "BUY" else current_price * (1 + sl_pct)
            tp_raw = current_price * (1 + tp_pct) if side == "BUY" else current_price * (1 - tp_pct)

            # –û–∫—Ä—É–≥–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –∑–Ω–∞—á–µ–Ω–∏–π
            sl = self.round_price(symbol, sl_raw)
            tp = self.round_price(symbol, tp_raw)
            quantity = self.round_qty(symbol, quantity)

            notional = current_price * quantity
            if quantity <= 0:
                msg = f"[‚ùå –û—à–∏–±–∫–∞]: –†–∞—Å—á—ë—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ–Ω—å—à–µ –∏–ª–∏ —Ä–∞–≤–Ω–æ –Ω—É–ª—é. QTY={quantity}"
                print(msg)
                return msg
            if notional < 5:
                msg = f"[‚ùå –û—à–∏–±–∫–∞]: Notional ({notional:.4f}) –º–µ–Ω—å—à–µ 5 USDT. QTY={quantity}, –¶–µ–Ω–∞={current_price}"
                print(msg)
                return msg

            print(f"üîÑ SL: {sl:.4f} | TP: {tp:.4f} | Qty: {quantity} | Notional: {notional:.4f}")

            

            # –ü—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω–∞—è —Å—Ç–æ—Ä–æ–Ω–∞
            opposite_side = SIDE_SELL if side == "BUY" else SIDE_BUY

            # –û–∫—Ä—É–≥–ª—ë–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –ª–∏–º–∏—Ç-—Ü–µ–Ω
            sl_limit_price = self.round_price(symbol, sl * 0.998 if side == "BUY" else sl * 1.002)
            tp_limit_price = self.round_price(symbol, tp * 1.002 if side == "BUY" else tp * 0.998)

            # –ï—â—ë —Ä–∞–∑ —Å—Ç—Ä–æ–≥–æ –æ–∫—Ä—É–≥–ª—è–µ–º stopPrice
            stop_price_sl = self.round_price(symbol, sl)
            stop_price_tp = self.round_price(symbol, tp)

            # Stop Loss
            self.client.futures_create_order(
                symbol=symbol,
                side=opposite_side,
                type=FUTURE_ORDER_TYPE_STOP,
                stopPrice=stop_price_sl,
                price=sl_limit_price,
                quantity=quantity,
                reduceOnly=True,
                timeInForce=TIME_IN_FORCE_GTC,
                workingType="CONTRACT_PRICE",
                priceProtect=True
            )
            print(f"üõë Stop Loss LIMIT: —Å—Ç–æ–ø={stop_price_sl} ‚Üí –ª–∏–º–∏—Ç={sl_limit_price}")

            # Take Profit
            self.client.futures_create_order(
                symbol=symbol,
                side=opposite_side,
                type=FUTURE_ORDER_TYPE_TAKE_PROFIT,
                stopPrice=stop_price_tp,
                price=tp_limit_price,
                quantity=quantity,
                reduceOnly=True,
                timeInForce=TIME_IN_FORCE_GTC,
                workingType="CONTRACT_PRICE",
                priceProtect=True
            )
            print(f"üéØ Take Profit LIMIT: —Å—Ç–æ–ø={stop_price_tp} ‚Üí –ª–∏–º–∏—Ç={tp_limit_price}")

            # –û—Ç–∫—Ä—ã—Ç–∏–µ —Ä—ã–Ω–æ—á–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏
            order = self.client.futures_create_order(
                symbol=symbol,
                side=SIDE_BUY if side == "BUY" else SIDE_SELL,
                type=FUTURE_ORDER_TYPE_MARKET,
                quantity=quantity,
            )
            print(f"‚úÖ –ü–æ–∑–∏—Ü–∏—è –æ—Ç–∫—Ä—ã—Ç–∞: {order['orderId']}")


            # –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—É –≤—Ö–æ–¥–∞
            position_info = self.client.futures_position_information(symbol=symbol)
            entry_price = float(next(p for p in position_info if p["positionSide"] == "BOTH")['entryPrice'])
            self.last_entry_price = entry_price
            self.default_leverage = leverage
            print(f"üìä –¶–µ–Ω–∞ –≤—Ö–æ–¥–∞: {entry_price}")

            return f"‚úÖ –û—Ç–∫—Ä—ã—Ç–∞ –ø–æ–∑–∏—Ü–∏—è –Ω–∞ {side} –ø–æ {symbol}, SL={stop_price_sl}, TP={stop_price_tp}"

        except BinanceAPIException as e:
            msg = f"[‚ùå Binance API –æ—à–∏–±–∫–∞]: {e.message}"
            print(msg)
            self.cleanup_after_trailing_stop(symbol)
            return msg
        except BinanceOrderException as e:
            msg = f"[‚ùå –û—à–∏–±–∫–∞ –æ—Ä–¥–µ—Ä–∞]: {e.message}"
            print(msg)
            self.cleanup_after_trailing_stop(symbol)
            return msg
        except Exception as e:
            msg = f"[‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞]: {str(e)}"
            print(msg)
            return msg


    def close_position(self, symbol, side, quantity):
        if not self.orders_enabled:
            print("üõë –û—Ä–¥–µ—Ä–∞ –æ—Ç–∫–ª—é—á–µ–Ω—ã ‚Äî –æ—Ç–∫—Ä—ã—Ç–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
            return "üõë –û—Ä–¥–µ—Ä–∞ –æ—Ç–∫–ª—é—á–µ–Ω—ã ‚Äî –æ—Ç–∫—Ä—ã—Ç–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ."
        try:
            quantity = self.round_qty(symbol, quantity)
            if quantity <= 0:
                return f"[‚ùå –û—à–∏–±–∫–∞]: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è: {quantity}"

            open_orders = self.client.futures_get_open_orders(symbol=symbol)
            for order in open_orders:
                self.client.futures_cancel_order(symbol=symbol, orderId=order["orderId"])
            print("üö´ –í—Å–µ –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã–µ –æ—Ä–¥–µ—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω—ã.")

            close_side = SIDE_SELL if side == "BUY" else SIDE_BUY

            order = self.client.futures_create_order(
                symbol=symbol,
                side=close_side,
                type=FUTURE_ORDER_TYPE_MARKET,
                quantity=quantity,
                reduceOnly=True
            )

            pnl = None
            if self.last_entry_price:
                fills = order.get("fills", [])
                if fills:
                    exit_price = float(fills[0]["price"])
                else:
                    exit_price = float(order.get("avgFillPrice", 0))
                entry_price = self.last_entry_price
                if side == "BUY":
                    pnl = (exit_price - entry_price) * quantity
                else:
                    pnl = (entry_price - exit_price) * quantity

            self.last_signal = None
            self.last_entry_price = None

            msg = f"‚ùé –ü–æ–∑–∏—Ü–∏—è –∑–∞–∫—Ä—ã—Ç–∞: {quantity} {symbol} ({close_side})"
            self.cleanup_after_trailing_stop(symbol)
            if pnl is not None:
                msg += f" | üí∏ –ü—Ä–∏–±—ã–ª—å: {pnl:.2f} USDT"
            print(msg)
            return msg

        except BinanceAPIException as e:
            msg = f"[‚ùå Binance API –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏]: {e.message}"
            print(msg)
            return msg
        except BinanceOrderException as e:
            msg = f"[‚ùå –û—à–∏–±–∫–∞ –æ—Ä–¥–µ—Ä–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏]: {e.message}"
            print(msg)
            return msg
        except Exception as e:
            msg = f"[‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –ø–æ–∑–∏—Ü–∏–∏]: {str(e)}"
            print(msg)
            return msg

    def cleanup_after_trailing_stop(self, symbol):
        try:
            if not self.has_open_position(symbol):
                open_orders = self.client.futures_get_open_orders(symbol=symbol)
                if open_orders:
                    for order in open_orders:
                        self.client.futures_cancel_order(symbol=symbol, orderId=order["orderId"])
                    print("üßπ –£–¥–∞–ª–µ–Ω—ã –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã–µ –æ—Ä–¥–µ—Ä–∞.")
                self.last_signal = None
                self.last_entry_price = None
                return "üßº –ß–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –ø–æ—Å–ª–µ –≤—ã—Ö–æ–¥–∞."
        except Exception as e:
            return f"[‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ-—á–∏—Å—Ç–∫–µ]: {str(e)}"
        return "üßº –ß–∏—Å—Ç–∫–∞ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è, –ø–æ–∑–∏—Ü–∏—è –µ—â—ë –æ—Ç–∫—Ä—ã—Ç–∞."
