comments[1]={}
comments[2]={}

# üß† –ù–∞—Å—Ç—Ä–æ–π–∫–∏
API_KEY = "7u6mrJUC80sCeYMv8zcVXIcGzkuGfF5HsANJUNhnuP8BRZVKgWnZytAqv0plDn4X"
API_SECRET = "rKVkFVGddszfKv9LhBKThOkR6530tmNdaKiD4eRUi1Kbl0J14pV6UrrQXzBbJ9jV"
IS_TESTNET = False
QUANTITY = 0.2
LEVERAGE = 20
ATR_MULT_SL = 0.2
ATR_MULT_TP = 1.2
SYMBOL = SYMBOL

rsi_buy = 40
rsi_sell = 60

BOUNCE_THRESHOLD = 0.001
BOUNCE_CONFIRMATION_RATIO = 0.001

# üìà –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
df["rsi"] = ta.rsi(df["close"], length=14)
df["ema"] = ta.ema(df["close"], length=20)
df["atr"] = ta.atr(df["high"], df["low"], df["close"], length=14)

# üïØÔ∏è –°–≤–µ—á–Ω—ã–µ –º–æ–¥–µ–ª–∏
df["bullish_engulfing"] = (df["close"] > df["open"].shift(1)) & (df["open"] < df["close"].shift(1))
df["bearish_engulfing"] = (df["close"] < df["open"].shift(1)) & (df["open"] > df["close"].shift(1))




# üö™ –£—Å–ª–æ–≤–∏—è –≤—Ö–æ–¥–∞
df["entry_buy"] = (df["rsi"] < rsi_buy) & (df["close"] > df["ema"]) & df["bullish_engulfing"]
df["entry_sell"] = (df["rsi"] > rsi_sell) & (df["close"] < df["ema"]) & df["bearish_engulfing"]

# üö™ –£—Å–ª–æ–≤–∏—è –≤—Ö–æ–¥–∞ –ø—Ä–æ—Å—Ç–æ–µ 
#df["entry_buy"] = (df["rsi"] < rsi_buy) & (df["close"] > df["ema"])
#df["entry_sell"] = (df["rsi"] > rsi_sell) & (df["close"] < df["ema"])


# üßÆ –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –≤—Ö–æ–¥–∞
df["buy_prob"] = (
    1.0 * (df["rsi"] < rsi_buy).astype(int) +
    1.0 * (df["close"] > df["ema"]).astype(int) +
    1.0 * df["bullish_engulfing"].astype(int)
) / 3 *100

df["sell_prob"] = (
    1.0 * (df["rsi"] > rsi_sell).astype(int) +
    1.0 * (df["close"] < df["ema"]).astype(int) +
    1.0 * df["bearish_engulfing"].astype(int)
) / 3 *100


buy_probability = df["buy_prob"].iloc[-1]
sell_probability = df["sell_prob"].iloc[-1]


if buy_probability > 66:
    comments[2][0]= f"üü¢ –°–∏–ª—å–Ω—ã–π –±—ã—á–∏–π —Å–∏–≥–Ω–∞–ª (–≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –≤—Ö–æ–¥–∞: {buy_probability:.1f} %)"
elif buy_probability > 33:
    comments[2][0]= f"üü° –°—Ä–µ–¥–Ω–∏–π –±—ã—á–∏–π —Å–∏–≥–Ω–∞–ª (–≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –≤—Ö–æ–¥–∞: {buy_probability:.1f}%)"
elif buy_probability > 0:
    comments[2][0]= f"‚ö™Ô∏è –°–ª–∞–±—ã–π –±—ã—á–∏–π —Å–∏–≥–Ω–∞–ª (–≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –≤—Ö–æ–¥–∞: {buy_probability:.1f}%)"

if sell_probability > 66:
    comments[2][0]= f"üî¥ –°–∏–ª—å–Ω—ã–π –º–µ–¥–≤–µ–∂–∏–π —Å–∏–≥–Ω–∞–ª (–≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –≤—Ö–æ–¥–∞: {sell_probability:.1f}%)"
elif sell_probability > 33:
    comments[2][0]= f"üü† –°—Ä–µ–¥–Ω–∏–π –º–µ–¥–≤–µ–∂–∏–π —Å–∏–≥–Ω–∞–ª (–≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –≤—Ö–æ–¥–∞: {sell_probability:.1f}%)"
elif sell_probability > 0:
    comments[2][0]= f"‚ö™Ô∏è –°–ª–∞–±—ã–π –º–µ–¥–≤–µ–∂–∏–π —Å–∏–≥–Ω–∞–ª (–≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –≤—Ö–æ–¥–∞: {sell_probability:.1f}%)"

# üñçÔ∏è –ú–µ—Ç–∫–∏ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞
df["mark_bullish"] = df["entry_buy"] | df["bullish_engulfing"]
df["mark_bearish"] = df["entry_sell"] | df["bearish_engulfing"]

# –ü–µ—Ä–µ–¥–∞—ë–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
detector.set_params(order=10, round_to=2)

# –ú–∞–≥–∏—è —É—Ä–æ–≤–Ω–µ–π
support, resistance, _, _ = detector.detect_levels()

# –°–æ–∑–¥–∞—ë–º –∫–æ–ª–æ–Ω–∫–∏ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
for col in ["support_levels", "resistance_levels"]:
    if col not in df.columns:
        df[col] = None

# –ö–ª–∞–¥—ë–º —Å–ø–∏—Å–∫–∏ –≤ –ø–µ—Ä–≤—É—é —Å—Ç—Ä–æ–∫—É
df.at[0, "support_levels"] = support
df.at[0, "resistance_levels"] = resistance

# üí• –û—Ç—Å–∫–æ–∫–∏


bounce_support_flags = []
bounce_resistance_flags = []

for i in range(len(df)):
    price = df["close"].iloc[i]
    confirmed_support = False
    confirmed_resistance = False

    for lvl in support:
        if abs(price - lvl) / lvl < BOUNCE_THRESHOLD:
            # –ü—Ä–æ–≤–µ—Ä–∏–º –æ—Ç—Å–∫–æ–∫ —á–µ—Ä–µ–∑ 1-2 —Å–≤–µ—á–∏
            if i + 2 < len(df):
                future_price = df["close"].iloc[i + 2]
                if (future_price - lvl) / lvl > BOUNCE_CONFIRMATION_RATIO:
                    confirmed_support = True
                    break

    for lvl in resistance:
        if abs(price - lvl) / lvl < BOUNCE_THRESHOLD:
            if i + 2 < len(df):
                future_price = df["close"].iloc[i + 2]
                if (lvl - future_price) / lvl > BOUNCE_CONFIRMATION_RATIO:
                    confirmed_resistance = True
                    break

    bounce_support_flags.append(confirmed_support)
    bounce_resistance_flags.append(confirmed_resistance)

df["bounce_support"] = bounce_support_flags
df["bounce_resistance"] = bounce_resistance_flags


# üö™ –£—Å–ª–æ–≤–∏—è –≤—Ö–æ–¥–∞
df["entry_buy"] = df["bounce_support"] & (df["rsi"] > rsi_buy) & (df["close"] > df["ema"])
df["entry_sell"] = df["bounce_resistance"] & (df["rsi"] < rsi_sell) & (df["close"] < df["ema"])

df["signal"] = None  # –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø—É—Å—Ç–æ
df.loc[df["entry_buy"], "signal"] = "BUY"
df.loc[df["entry_sell"], "signal"] = "SELL"

if not df["entry_buy"].iloc[-1] and df["bounce_support"].iloc[-1]:
    comments[1][3.2] = "‚ö™Ô∏è –ï—Å—Ç—å –∫–∞—Å–∞–Ω–∏–µ —É—Ä–æ–≤–Ω—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏, –Ω–æ –æ—Ç—Å–∫–æ–∫ —Å–ª–∞–±—ã–π –∏–ª–∏ –±–µ–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è."

if not df["entry_sell"].iloc[-1] and df["bounce_resistance"].iloc[-1]:
    comments[1][3.2] = "‚ö™Ô∏è –ï—Å—Ç—å –∫–∞—Å–∞–Ω–∏–µ —É—Ä–æ–≤–Ω—è —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è, –Ω–æ –æ—Ç—Å–∫–æ–∫ —Å–ª–∞–±—ã–π –∏–ª–∏ –±–µ–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è."



# üßÆ –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏
df["buy_prob"] = (
    df["bounce_support"].astype(int) +
    (df["rsi"] > rsi_buy).astype(int) +
    (df["close"] > df["ema"]).astype(int)
) / 3 * 100

df["sell_prob"] = (
    df["bounce_resistance"].astype(int) +
    (df["rsi"] < rsi_sell).astype(int) +
    (df["close"] < df["ema"]).astype(int)
) / 3 * 100

# üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
buy_probability = df["buy_prob"].iloc[-1]
sell_probability = df["sell_prob"].iloc[-1]

if buy_probability > 66:
    comments[1][2.75] = f"üü¢ –°–∏–ª—å–Ω—ã–π –æ—Ç—Å–∫–æ–∫ –≤–≤–µ—Ä—Ö ({buy_probability:.1f}%)"
elif buy_probability > 33:
    comments[1][2.75] = f"üü° –°—Ä–µ–¥–Ω–∏–π –æ—Ç—Å–∫–æ–∫ –≤–≤–µ—Ä—Ö ({buy_probability:.1f}%)"
elif buy_probability > 0:
    comments[1][2.75] = f"‚ö™Ô∏è –°–ª–∞–±—ã–π –æ—Ç—Å–∫–æ–∫ –≤–≤–µ—Ä—Ö ({buy_probability:.1f}%)"

if sell_probability > 66:
    comments[1][2.75] = f"üî¥ –°–∏–ª—å–Ω—ã–π –æ—Ç—Å–∫–æ–∫ –≤–Ω–∏–∑ ({sell_probability:.1f}%)"
elif sell_probability > 33:
    comments[1][2.75] = f"üü† –°—Ä–µ–¥–Ω–∏–π –æ—Ç—Å–∫–æ–∫ –≤–Ω–∏–∑ ({sell_probability:.1f}%)"
elif sell_probability > 0:
    comments[1][2.75] = f"‚ö™Ô∏è –°–ª–∞–±—ã–π –æ—Ç—Å–∫–æ–∫ –≤–Ω–∏–∑ ({sell_probability:.1f}%)"

# üìä –ì—Ä–∞—Ñ–∏–∫
plot_columns = ["close", "rsi:2", "ema", "buy_prob:2", "sell_prob:2",]
mark_condition = df["mark_bullish"] | df["mark_bearish"]




# üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
tr.set_credentials(API_KEY, API_SECRET, IS_TESTNET)
notifier.set_credentials("7979456533:AAGneMP9LlIASbHeFKeOoNruMMBd-nmQRnQ", "353095791")

balance = tr.check_futures_balance()
comments[1][0] = f"üí∞ –ë–∞–ª–∞–Ω—Å USDT: {balance}"

# üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –æ—Ç–∫—Ä—ã—Ç–æ–π –ø–æ–∑–∏—Ü–∏–∏
position_info = tr.get_open_position(SYMBOL)

if position_info:
    # üß≠ –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏
    amt = position_info['amount']
    if amt > 0:
        comments[1][1.55] = "üü¢ –ü–æ–∑–∏—Ü–∏—è: LONG"
    elif amt < 0:
        comments[1][1.55] = "üî¥ –ü–æ–∑–∏—Ü–∏—è: SHORT"
    else:
        comments[1][1.55] = "‚ö™Ô∏è –ü–æ–∑–∏—Ü–∏—è –æ—Ç–∫—Ä—ã—Ç–∞, –Ω–æ –æ–±—ä—ë–º 0"

    # üí¨ –î–µ—Ç–∞–ª–∏ –ø–æ–∑–∏—Ü–∏–∏
    comments[1][1.55] += (
        f"üìç –í—Ö–æ–¥: {position_info['entry_price']:.2f} | "
        f"üìà –¢–µ–∫—É—â–∞—è: {position_info['mark_price']:.2f} | "
        f"üíµ PnL: {position_info['pnl']:.2f} USDT"
    )

    # üéØ SL –∏ TP
    sl = position_info['sl']
    tp = position_info['tp']
    sl_text = f"{sl:.4f}" if sl else "‚ùå"
    tp_text = f"{tp:.4f}" if tp else "‚ùå"
    comments[1][1.9] = f"üìä SL: {sl_text} | TP: {tp_text}"

else:
    comments[1][1.57] = "üì≠ –ü–æ–∑–∏—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"


# üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–∑–∏—Ü–∏–∏
has_open = tr.has_open_position(SYMBOL)
if has_open:
    comments[1][1.1] = f"üìå–ü–æ–∑–∏—Ü–∏—è –æ—Ç–∫—Ä—ã—Ç–∞"
else:
    comments[1][1.1] = "üìå–ù–µ—Ç –ø–æ–∑–∏—Ü–∏–∏"

# üìâ –†–∞—Å—á—ë—Ç SL –∏ TP —Å —É—á—ë—Ç–æ–º —É—Ä–æ–≤–Ω–µ–π

# üí∞ –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ –∏ ATR
atr = df["atr"].iloc[-1]
current_price = df["close"].iloc[-1]

# üîç –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–∏—Å—Ç–∞–Ω—Ü–∏—è ‚Äî –ø—É—Å—Ç—å –±—É–¥–µ—Ç —Ä–∞–≤–Ω–∞ atr (–∏–ª–∏ –º–æ–∂–Ω–æ —É–º–Ω–æ–∂–∏—Ç—å, –µ—Å–ª–∏ —Ö–æ—á–µ—à—å)
min_distance = atr

# üîΩ –ü–æ–∏—Å–∫ –±–ª–∏–∂–∞–π—à–µ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏: –Ω–∏–∂–µ —Ü–µ–Ω—ã, –Ω–µ —Å–ª–∏—à–∫–æ–º –±–ª–∏–∑–∫–æ, –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ä–∞–∑–Ω–∏—Ü–∞
nearest_support = None
min_support_diff = float("inf")

for lvl in support:
    diff = abs(current_price - lvl)
    if lvl < current_price and diff >= min_distance and diff < min_support_diff:
        nearest_support = lvl
        min_support_diff = diff

# üîº –ü–æ–∏—Å–∫ –±–ª–∏–∂–∞–π—à–µ–≥–æ —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è: –≤—ã—à–µ —Ü–µ–Ω—ã, –Ω–µ —Å–ª–∏—à–∫–æ–º –±–ª–∏–∑–∫–æ, –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ä–∞–∑–Ω–∏—Ü–∞
nearest_resistance = None
min_resistance_diff = float("inf")

for lvl in resistance:
    diff = abs(current_price - lvl)
    if lvl > current_price and diff >= min_distance and diff < min_resistance_diff:
        nearest_resistance = lvl
        min_resistance_diff = diff



use_support = len(support) > 1
use_resistance = len(resistance) > 1

# üßÆ –†–∞—Å—á—ë—Ç SL –∏ TP
if df["entry_buy"].iloc[-1] and nearest_support and use_support:
    SL_PCT = (current_price - nearest_support) / current_price
    TP_PCT = (nearest_resistance - current_price) / current_price if nearest_resistance else (ATR_MULT_TP * atr) / current_price

elif df["entry_sell"].iloc[-1] and nearest_resistance and use_resistance:
    SL_PCT = (nearest_resistance - current_price) / current_price
    TP_PCT = (current_price - nearest_support) / current_price if nearest_support else (ATR_MULT_TP * atr) / current_price

else:
    SL_PCT = (ATR_MULT_SL * atr) / current_price
    TP_PCT = (ATR_MULT_TP * atr) / current_price

SL_PCT = (ATR_MULT_SL * atr) / current_price
TP_PCT = (ATR_MULT_TP * atr) / current_price

# üí∞ –¢–æ—á–Ω—ã–µ —Ü–µ–Ω—ã —Å—Ç–æ–ø–∞ –∏ –ø—Ä–æ—Ñ–∏—Ç–∞
sl_price = current_price - (current_price * SL_PCT)
tp_price = current_price + (current_price * TP_PCT)

comments[1][2.2] = f"üîª : {sl_price:.4f} | üî∫ : {tp_price:.4f}"

# ‚úÖ –¢–æ—Ä–≥–æ–≤–∞—è –ª–æ–≥–∏–∫–∞ ‚Äî –æ—Å–æ–∑–Ω–∞–Ω–Ω–∞—è –∏ —á–µ—Å—Ç–Ω–∞—è
if df["entry_buy"].iloc[-1]:
    comments[1][2.5] = "üü¢ –°–∏–≥–Ω–∞–ª –Ω–∞ –ø–æ–∫—É–ø–∫—É ‚Äî –±—ã—á—å—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å!"
elif df["entry_sell"].iloc[-1]:
    comments[1][2.5] = "üî¥ –°–∏–≥–Ω–∞–ª –Ω–∞ –ø—Ä–æ–¥–∞–∂—É ‚Äî –º–µ–¥–≤–µ–∂–∏–π —à–∞–Ω—Å!"
else:
    comments[1][2.5] = "‚è≥ –ü–æ–∫–∞ –Ω–µ—Ç —Å–∏–≥–Ω–∞–ª–∞ ‚Äî –Ω–∞–±–ª—é–¥–∞–µ–º —Ä—ã–Ω–æ–∫..."



# ‚úÖ –¢–æ—Ä–≥–æ–≤–∞—è –ª–æ–≥–∏–∫–∞
if df["entry_buy"].iloc[-1]:
    if tr.last_signal == "SELL":
        close_msg = tr.close_position(SYMBOL, "SELL", QUANTITY)
        comments[2][3] = close_msg
        notifier.send(close_msg)

    if not has_open:
        open_msg = tr.open_position(SYMBOL, "BUY", QUANTITY, SL_PCT, TP_PCT, LEVERAGE)
        comments[2][3] = open_msg
        notifier.send(open_msg)
      

elif df["entry_sell"].iloc[-1]:
    if tr.last_signal == "BUY":
        close_msg = tr.close_position(SYMBOL, "BUY", QUANTITY)
        comments[2][3] = close_msg
        notifier.send(close_msg)

    if not has_open:
        open_msg = tr.open_position(SYMBOL, "SELL", QUANTITY, SL_PCT, TP_PCT, LEVERAGE)
        comments[2][3] = open_msg
        notifier.send(open_msg)

# üßπ –û—á–∏—Å—Ç–∫–∞ –ø–æ—Å–ª–µ TP/SL
tr.cleanup_after_trailing_stop(SYMBOL)

comments[1][3] = f"üí¨ –ò–Ω—Ñ–æ: - RSI: {df['rsi'].iloc[-1]:.4f} - –¶–µ–Ω–∞: {df['close'].iloc[-1]:.4f} - EMA: {df['ema'].iloc[-1]:.4f}"